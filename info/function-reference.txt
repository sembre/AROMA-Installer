[B]CONFIGURATION FUNCTIONS[/B]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]setcolor[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Set AROMA Installer Color Scheme. It can also defined in themes with theme.prop file
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]void[/SIZE] [B]setcolor[/B](colorname, hexcolor);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]colorname[/B] - Name of color to be set. colorname with "_g" for gradient color.
            [LIST]
              [*][B]winbg[/B], [B]winbg_g[/B] : Main/Top Most Window Backgroud
              [*][B]winfg[/B] : Main/Top Most Window Text Foreground
              [*][B]winfg_gray[/B] : Main/Top Most Window Gray Text Foreground
              [*][B]dialogbg[/B], [B]dialogbg_g[/B] : Popup Window Backgroud (Alert, Confirm, About)
              [*][B]dialogfg[/B] : Popup Window Text Foreground
              [*][B]textbg[/B], [B]textbg_g[/B] : Textbox, Checkbox, and any scrollable UI Background
              [*][B]textfg[/B] : Textbox, Checkbox, and any scrollable UI Text Foreground
              [*][B]textfg_gray[/B] : Gray Text ( on Optionbox/Checkbox Item Description )
              [*][B]controlbg[/B], [B]controlbg_g[/B] : Control / Button / Checkbox border - Background Color
              [*][B]controlfg[/B] : Button Text Color
              [*][B]selectbg[/B], [B]selectbg_g[/B] : Selected Element Background ( Pushed/focused Button/items, etc )
              [*][B]selectfg[/B] : Selected Element Text/Foreground Color
              [*][B]titlebg[/B], [B]titlebg_g[/B] : Window Title Background
              [*][B]titlefg[/B] : Window Title Text Foreground Color
              [*][B]navbg[/B], [B]navbg_g[/B] : Bottom Bar (Navigation Bar) Background. Next-Previous Area
              [*][B]scrollbar[/B] : Scrollbar indicator color
              [*][B]border[/B], [B]border_g[/B] : Common Border Color
              [*][B]progressglow[/B] : Progress Animation Color
            [/LIST]
          [*][B]hexcolor[/B] - Hexadecimal Color in RGB. it support 3 and 6 characters hexadecimal started with #. example: "#a8e" or "#ff5599".
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        none
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# Set Color with 3 chars hexcolor
setcolor("winbg",       "#444");
setcolor("winbg_g",     "#222");
setcolor("textbg",      "#333");
setcolor("textfg",      "#fff");

# Set Color with 6 chars hexcolor
setcolor("textfg_gray", "#bbbbbb");
setcolor("controlbg",   "#446699");
setcolor("controlbg_g", "#223355");[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]ini_set[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Sets the value of a AROMA Installer configuration option
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]void[/SIZE] [B]setcolor[/B](configname, newvalue);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]configname[/B] - Configuration name to be set.
            [LIST]
              [*][B]roundsize[/B] : Set Corner size of rounded rectangle for common controls (default:"3")
              [*][B]button_roundsize[/B]: Set Corner size of rounded rectangle for button controls (default:"2")
              [*][B]window_roundsize[/B] : Set Corner size of rounded rectangle for main window (default:"4")
              [*][B]transition_frame[/B] : Set number of frames for transition (default:"5")
              [*][B]text_ok[/B] : Set text for common OK text  (default:"OK")
              [*][B]text_next[/B] : Set text for wizard next button (default:"Next >")
              [*][B]text_back[/B] : Set text for wizard back button (default:"< Back")
              [*][B]text_yes[/B] : Set text for default yes button (default:"Yes")
              [*][B]text_no[/B] : Set text for default no button (default:"No")
              [*][B]text_about[/B] : Set text for About menu (default:"About & Informations")
              [*][B]text_calibrating[/B] : Set text for Calibration Menu (default:"Calibrating Tools")
              [*][B]text_quit[/B] : Set text for Quit Menu (default:"Quit Installation")
              [*][B]text_quit_msg[/B] : Set text for Quit Confirmation Message (default:"Are you sure to quit the Installer?")
              [*][B]rom_name[/B] : Set ROM Name Information
              [*][B]rom_version[/B] : Set ROM Version Information
              [*][B]rom_author[/B] : Set ROM Author Information
              [*][B]rom_device[/B] : Set ROM Device Information
              [*][B]customkeycode_up[/B] : Set Alternative keycode for up key (navigate up)
              [*][B]customkeycode_down[/B] : Set Alternative keycode for down key (navigate down)
              [*][B]customkeycode_select[/B] : Set Alternative keycode for select key (select an item)
              [*][B]customkeycode_back[/B] : Set Alternative keycode for back key
              [*][B]customkeycode_menu[/B] : Set Alternative keycode for menu key
            [/LIST]
          [*][B]newvalue[/B] - New value to be set for configname
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        none
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# Set ROM Informations
ini_set("rom_name",             "AROMA ROM");
ini_set("rom_version",          "1.0");
ini_set("rom_author",           "amarullz");
ini_set("rom_device",           "HTC Desire (bravo)");

# Set Custom Text
ini_set("text_ok",              "OK Man");
ini_set("text_next",            ">>");
ini_set("text_back",            "<<");

# Set Alternative Key Code - You can use keycapture tool
# to capture your device keycode
ini_set("customkeycode_up",     "115");
ini_set("customkeycode_down",   "114");
ini_set("customkeycode_select", "116");
ini_set("customkeycode_menu",   "229");
ini_set("customkeycode_back",   "158");[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]calibrate[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Set Touch Screen Calibration Data. Different device may had different touch screen calibration data. To get calibration data, press menu, select calibration tools then follow the intructions.
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]void[/SIZE] [B]calibrate[/B](divx, addx, divy, addy [, alternative_method]);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]divx[/B] - Division value for horizontal touchscreen to display resolution.
          [*][B]addx[/B] - Add value for horizontal alignment.
          [*][B]divy[/B] - Division value for vertical touchscreen to display resolution.
          [*][B]addy[/B] - Add value for vertical alignment.
          [*][B]alternative_method[/B] [Optional] - Use alternative method for touch screen handling if normal method not works in your device (default:"no")
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        none
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# HTC Desire Calibrated Data
calibrate("7.90","20","7.90","20");

# Alternative method Calibrated Data
calibration("1.8447", "37", "1.2158", "27", "yes");[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]


[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]calibtool[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Start calibration tool.
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]void[/SIZE] [B]calibtool[/B](dummy_arguments);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]dummy_arguments[/B] - Edify should pass at least 1 arguments. Just Pass "" for it
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        none
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# Start Calibrating Tools
calibtool("");[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]theme[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Set AROMA Installer Theme will be used in next display.
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]void[/SIZE] [B]theme[/B](theme_name);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]theme_name[/B] - Theme Name will be used. It was theme directory name located in "META-INF/com/google/android/aroma/themes"
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        none
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# Use ICS Theme located at:
# META-INF/com/google/android/aroma/themes/ics
theme("ics");[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[B]VARIABLE FUNCTIONS[/B]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]getvar[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Get Variable
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]variable_value[/SIZE] [B]getvar[/B](varname);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]varname[/B] - Variable Name
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        Variable Value
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# Show "testvar" value in alert
alert(
  "Value of testvar",
  getvar("testvar")
);[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]setvar[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Set Variable
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]void[/SIZE] [B]setvar[/B](varname, value);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]varname[/B] - Variable Name to be set
          [*][B]value[/B] - New Value for Variable
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        none
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# Set new value for "testvar"
setvar("testvar", "This is only test!!");

# Now Show the "testvar" value in alert
alert(
  "Value of testvar",
  getvar("testvar")
);
[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]appendvar[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Append new value after previous value, it's like concating strings ( previous_value + newvalue )
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]void[/SIZE] [B]appendvar[/B](varname, value);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]varname[/B] - Variable Name to be set
          [*][B]value[/B] - New Value to be appended in variable
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        none
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# Set new value for "testvar"
setvar("testvar", "This is only test!!");

# Append new value
appendvar("testvar", "Add String");

# "testvar" now will contain "This is only test!!Add String"
[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]prependvar[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Prepend new value before previous value, it's like concating strings ( newvalue + previous_value )
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]void[/SIZE] [B]prependvar[/B](varname, value);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]varname[/B] - Variable Name to be set
          [*][B]value[/B] - New Value to be prepended in variable
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        none
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# Set new value for "testvar"
setvar("testvar", "This is only test!!");

# Prepend new value
prependvar("testvar", "Add String!! ");

# "testvar" now will contain "Add String!! This is only test!!"
[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[B]PROP FILE HANDLER FUNCTIONS[/B]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]file_getprop[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Read prop file value for given keyname
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]prop_value[/SIZE] [B]file_getprop[/B](filename, keyname);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]filename[/B] - Absolute path of prop file in filesystem
          [*][B]keyname[/B] - Prop Key Name
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        Value of prop for given keyname
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# Get value of "item.1.1" from /tmp/aroma-data/custom.prop
alert(
  "Value of Prop",
  file_getprop("/tmp/aroma-data/custom.prop", "item.1.1")
);
[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]prop[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Same with [B]file_getprop[/B], but will read relatively from AROMA Temporary Directory "/tmp/aroma-data/"
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]prop_value[/SIZE] [B]prop[/B](filename, keyname);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]filename[/B] - Relative path of prop file in AROMA Temporary Directory "/tmp/aroma-data/"
          [*][B]keyname[/B] - Prop Key Name
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        Value of prop for given keyname
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# Get value of "item.1.1" from /tmp/aroma-data/custom.prop
alert(
  "Value of Prop",
  prop("custom.prop", "item.1.1")
);
[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]zipprop[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Same with [B]file_getprop[/B], but will read the prop file from Zip
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]prop_value[/SIZE] [B]zipprop[/B](zip_path, keyname);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]zip_path[/B] - Absolute path of prop file in Zip ( don't add "/" in first character )
          [*][B]keyname[/B] - Prop Key Name
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        Value of prop for given keyname
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# Get value of "item.1.1" from META-INF/com/google/android/aroma/custom.prop
alert(
  "Value of Prop",
  zipprop("META-INF/com/google/android/aroma/custom.prop", "item.1.1")
);
[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]resprop[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Same with [B]zipprop[/B], but will read the prop file from Zip relatively from AROMA Resource Directory "META-INF/com/google/android/aroma/"
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]prop_value[/SIZE] [B]resprop[/B](zip_path, keyname);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]zip_path[/B] - Relative path of prop file in Zip from AROMA Resource Directory "META-INF/com/google/android/aroma/"
          [*][B]keyname[/B] - Prop Key Name
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        Value of prop for given keyname
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# Get value of "item.1.1" from META-INF/com/google/android/aroma/custom.prop
alert(
  "Value of Prop",
  resprop("custom.prop", "item.1.1")
);
[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]sysprop[/B], [B]property_get[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Read system property value for given keyname
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]prop_value[/SIZE] [B]property_get[/B](keyname);
        
        [SIZE="2"]prop_value[/SIZE] [B]sysprop[/B](keyname);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]keyname[/B] - Prop Key Name
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        Value of prop for given keyname
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# Get Device Board Name
alert(
  "Device Board Name",
  sysprop("ro.product.board")
);

# Get Board Platform
alert(
  "Device Board Name",
  property_get("ro.board.platform")
);
[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[B]FILESYSTEM FUNCTIONS[/B]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]writetmpfile[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Write string into file in AROMA temporary
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]void[/SIZE] [B]writetmpfile[/B](filename, value);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]filename[/B] - Destination file in AROMA temporary directory
          [*][B]value[/B] - String that will be write into the file
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        none
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# It will saved in from /tmp/aroma-data/test.txt
writetmpfile("test.txt", "This is test text");

# Show the content in alert with readtmpfile
alert(
  "Value of test.txt",
  readtmpfile("test.txt")
);

# Show the content in alert with read
alert(
  "Value of test.txt",
  read("/tmp/aroma-data/test.txt")
);
[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]write[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Write string into file in filesystem
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]void[/SIZE] [B]write[/B](filename, value);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]filename[/B] - Absolute path to Destination file
          [*][B]value[/B] - String that will be write into the file
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        none
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# It will saved in from /sdcard/test.txt
writetmpfile("/sdcard/test.txt", "This is test text");

# Show the content in alert with read
alert(
  "Value of test.txt",
  read("/sdcard/test.txt")
);
[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]readtmpfile[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Read string from file in AROMA temporary directory
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]content_of_file[/SIZE] [B]readtmpfile[/B](filename);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]filename[/B] - File in AROMA temporary directory that will be readed
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        Content of file in String
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# It will read data from /tmp/aroma-data/test.txt
# then save it in variable
setvar(
  "testvar",
  readtmpfile("test.txt")
);
[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]read[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Read string from file in filesysten
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]content_of_file[/SIZE] [B]read[/B](filename);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]filename[/B] - Absolute path to Destination file that will be readed
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        Content of file in String
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# It will read data from /sdcard/test.txt
# then save it in variable
setvar(
  "testvar",
  read("/sdcard/test.txt")
);
[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[B]ZIP CONTENT HANDLING FUNCTIONS[/B]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]readfile[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    DEPRECATED!!! - Identical with [B]zipread[/B]. Will be deleted soon.
  [/INDENT]
[/INDENT]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]readfile_aroma[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    DEPRECATED!!! - Identical with [B]resread[/B]. Will be deleted soon.
  [/INDENT]
[/INDENT]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]zipread[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Read string from file in zip
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]content_of_file[/SIZE] [B]zipread[/B](zip_path);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]zip_path[/B] - Absolute path to Destination file in zip that will be readed
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        Content of file in String
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# It will read data from zip content "META-INF/com/google/android/aroma/text.txt"
# then save it in variable
setvar(
  "testvar",
  zipread("META-INF/com/google/android/aroma/text.txt")
);

# It will read data from zip content "tmp/text.txt"
# then save it in variable
setvar(
  "testvar2",
  zipread("tmp/text.txt")
);
[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]
  
[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]resread[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Read string from file in zip relatively from AROMA Resource Directory "META-INF/com/google/android/aroma/"
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]content_of_file[/SIZE] [B]resread[/B](zip_path);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]zip_path[/B] - Relative path of file in Zip from AROMA Resource Directory "META-INF/com/google/android/aroma/" that will be readed
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        Content of file in String
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# It will read data from zip content "META-INF/com/google/android/aroma/text.txt"
# then save it in variable
setvar(
  "testvar",
  resread("text.txt")
);
[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]


[B]ZIP EXTRACT FUNCTIONS[/B]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]ziptotmp[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Extract file from zip content into AROMA Temporary directory, and automatically chmod it for executable.
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]void[/SIZE] [B]ziptotmp[/B](zip_path, destination_name);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]zip_path[/B] - Absolute path to Destination file in zip that will be extracted
          [*][B]destination_name[/B] - Extracted target filename
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        none
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# It will extract "tmp/busybox" into "/tmp/aroma-data/busybox"
ziptotmp("tmp/busybox", "busybox");

# Now we can execute it
exec("/tmp/aroma-data/busybox","ls","-l");
[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]restotmp[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Extract file from zip content in AROMA Resource Directory "META-INF/com/google/android/aroma/" into AROMA Temporary directory, and automatically chmod it for executable.
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]void[/SIZE] [B]restotmp[/B](zip_path, destination_name);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]zip_path[/B] - Relative path of file in Zip from AROMA Resource Directory "META-INF/com/google/android/aroma/" that will be extracted
          [*][B]destination_name[/B] - Extracted target filename
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        none
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# It will extract "META-INF/com/google/android/aroma/busybox" into "/tmp/aroma-data/busybox"
restotmp("busybox", "busybox");

# Now we can execute it
exec("/tmp/aroma-data/busybox","ls","-l");
[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[B]EXEC FUNCTIONS[/B]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]zipexec[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Extract file from zip into AROMA temporary, chmod it, and execute it.
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]exit_status[/SIZE] [B]zipexec[/B](zip_path [, argument1, argument2, ... ]);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]zip_path[/B] - Absolute path of zip content that will be executed
          [*][B]arguments[/B] [Optional] - Command line Arguments
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        Return exit status. "0" for common success status
        The output buffer/stdout will be automatically saved into "exec_buffer"
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# It will extract and run "META-INF/com/google/android/aroma/test.sh"
zipexec("META-INF/com/google/android/aroma/test.sh");

# With Arguments
zipexec("META-INF/com/google/android/aroma/test.sh", "argument1", "argument2");

# Get Return Status
if
  zipexec("META-INF/com/google/android/aroma/test.sh") == "0"
then
  alert(
    "Exec Status",
    "Shell was executed successfully"
  );
endif;

# Get STDOUT
zipexec("META-INF/com/google/android/aroma/test.sh");
alert(
    "Exec STDOUT",
    getvar("exec_buffer")
  );

[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]resexec[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Same as zipexec, but it will extract and run the file from zip relatively from AROMA Resource Directory "META-INF/com/google/android/aroma"
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]exit_status[/SIZE] [B]resexec[/B](zip_path [, argument1, argument2, ... ]);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]zip_path[/B] - Relative path of zip content from AROMA Resource Directory "META-INF/com/google/android/aroma/" that will be executed 
          [*][B]arguments[/B] [Optional] - Command line Arguments
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        Return exit status. "0" for common success status
        The output buffer/stdout will be automatically saved into "exec_buffer"
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# It will extract and run "META-INF/com/google/android/aroma/test.sh"
resexec("test.sh");

# With Arguments
resexec("test.sh", "argument1", "argument2");

# Get Return Status
if
  resexec("test.sh") == "0"
then
  alert(
    "Exec Status",
    "Shell was executed successfully"
  );
endif;

# Get STDOUT
resexec("test.sh");
alert(
    "Exec STDOUT",
    getvar("exec_buffer")
  );

[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]


[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]run_program[/B], [B]exec[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Run executable from filesystem
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]exit_status[/SIZE] [B]run_program[/B](path [, argument1, argument2, ... ]);
        [SIZE="2"]exit_status[/SIZE] [B]exec[/B](path [, argument1, argument2, ... ]);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]zip_path[/B] - Absolute path to executable
          [*][B]arguments[/B] [Optional] - Command line Arguments
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        Return exit status. "0" for common success status
        The output buffer/stdout will be automatically saved into "exec_buffer"
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# It will run "ls" command
run_program("/sbin/ls");

# or
exec("/sbin/ls");

# With some Arguments
run_program("/sbin/ls", "-l", "/sdcard");

# Mounting Device
exec("/sbin/mount", "-t", "auto", "/system");

# Get Return Status
if
  exec("/sbin/mount", "-t", "auto", "/system") == "0"
then
  alert(
    "Exec Status",
    "Mount was executed successfully"
  );
endif;

# Get STDOUT
exec("/sbin/ls", "-l", "/sdcard/*.zip");
alert(
    "List of Zip in SDCARD",
    getvar("exec_buffer")
  );

[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

########################### NEXT THREAD ###########################

[B]PARTITION INFORMATION FUNCTIONS[/B]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]getdisksize[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Get partition size for given path.
        [B]NOTE:[/B] This Function May not Supported with all Recovery, because it use mount command to mount the partition
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]partition_size[/SIZE] [B]getdisksize[/B](path, unit);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]path[/B] - Mount Point of Partition
          [*][B]unit[/B] - Return as Unit ( "m"=MB, "k"=KB, "b"=bytes )
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        Return partition size in unit size.
        1024 = 1KB, 1024KB = 1MB
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# Get System Partition Size in MB
setvar("systemsize", getdisksize("/system", "m"));

# Get Data Partition Size in KB
setvar("datasize", getdisksize("/data", "k"));
[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]getdiskfree[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Get partition free space for given path.
        [B]NOTE:[/B] This Function May not Supported with all Recovery, because it use mount command to mount the partition
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]partition_freesize[/SIZE] [B]getdiskfree[/B](path, unit);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]path[/B] - Mount Point of Partition
          [*][B]unit[/B] - Return as Unit ( "m"=MB, "k"=KB, "b"=bytes )
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        Return partition free spece in unit size.
        1024 = 1KB, 1024KB = 1MB
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# Get sd-ext Partition Free Space in Bytes
setvar("sdextfree", getdiskfree("/sd-ext", "b"));

# Get sdcard Partition Free Space in MB
setvar("sdcardfree", getdiskfree("/sdcard", "m"));
[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]getdiskusedpercent[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Get partition usage in percentage for given path.
        [B]NOTE:[/B] This Function May not Supported with all Recovery, because it use mount command to mount the partition
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]partition_freesize[/SIZE] [B]getdiskusedpercent[/B](path);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]path[/B] - Mount Point of Partition
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        Return partition free spece in unit size from 0 to 100.
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# Get sdcard Partition Usage in Percentage
setvar("sdcardusage", getdiskusedpercent("/sdcard"));
[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[B]MATH & COMPARISON FUNCTIONS[/B]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]cmp[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Compare 2 Integer Size
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]boolean[/SIZE] [B]cmp[/B](int1, operator, int2);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]int1[/B] - Value 1 for comparison
          [*][B]operator[/B] - Comparison Operator. Supported operator:
            [LIST]
              [*]"[B]==[/B]" - (Value 1) equal (Value 2)
              [*]"[B]>[/B]" - (Value 1) Greater than (Value 2)
              [*]"[B]<[/B]" - (Value 1) Less than (Value 2)
              [*]"[B]>=[/B]" - (Value 1) Greater than or equal to (Value 2)
              [*]"[B]<=[/B]" - (Value 1) Less than or equal to (Value 2)
              [*]"[B]!=[/B]" - (Value 1) Not equal (Value 2)
            [/LIST]
          [*][B]int2[/B] - Value 2 for comparison
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        Return boolean string of resulted comparison. can be used directly in if/else, or iif.
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# Compare 2 Integer
if
  cmp("2000", ">=", "1500")
then
  ...
endif;
[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]cal[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Calculate 2 Integer with simple Arithmetic operator
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]calculated_value[/SIZE] [B]cal[/B](int1, operator, int2);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]int1[/B] - Value 1 for calculating
          [*][B]operator[/B] - Arithmetic Operator. Supported operator:
            [LIST]
              [*]"[B]+[/B]" - Addition - Sum of (Value 1) and (Value 2)
              [*]"[B]-[/B]" - Subtraction - Difference of (Value 1) and (Value 2)
              [*]"[B]*[/B]" - Multiplication - Product of (Value 1) and (Value 2)
              [*]"[B]/[/B]" - Division - Quotient of (Value 1) and (Value 2)
              [*]"[B]%[/B]" - Modulus - Remainder of (Value 1) divided by (Value 2)
            [/LIST]
          [*][B]int2[/B] - Value 2 for calculating
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        Return calculated value.
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# Calculate and compare it
if
  cmp( cal("1000","+","500") , ">=", "1500")
then
  ...
endif;

# Multiplication
alert(
  "4000 * 200",
  "Result: "+cal("4000","*","200")
);
[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[B]LOGICAL FUNCTIONS[/B]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]iif[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Inline IF. Compare something in first argument, and return true_value if the logical return true, and false_value if false
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]returned_value[/SIZE] [B]iif[/B](logic, true_value, false_value);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]logic[/B] - Logical statement same as if/elseif logical sintaxm you can use cmp, or direct comparison like "==", or logical operator like "||", "&&", "!"
          [*][B]true_value[/B] - True value will be pass in return value if logic was true
          [*][B]false_value[/B] - False value will be pass in return value if logic was false
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        true_value or false_value depended by logic
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# Example to show dual language
alert(
  iif(getvar("lang")=="id","Selamat Datang","Welcome"),
  iif(getvar("lang")!="id","This Only Test","Ini Hanya Test")
);
[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[B]MISC FUNCTIONS[/B]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]exit[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Terminate current Installation Proccess
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]void[/SIZE] [B]exit[/B](dummy_arguments);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]dummy_arguments[/B] - Edify should pass at least 1 arguments. Just Pass "" for it
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        none
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# Terminate Installation
exit("");
[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]back[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Back to previous Installation wizard UI
        [B]NOTE:[/B] Experimental Function
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]void[/SIZE] [B]back[/B](dummy_arguments);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]dummy_arguments[/B] - Edify should pass at least 1 arguments. Just Pass "" for it
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        none
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# Back Example - If click no in confirm, it will back to checkbox
checkbox( .... );
if
  confirm("Back","Back to previous Wizard?")
then
  back("");
endif;
[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]pleasewait[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Show wait indicator for busy processing.
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]void[/SIZE] [B]pleasewait[/B](wait_text);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]wait_text[/B] - Text to show in wait interface
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        none
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# Show wait indicator before running long-time exec
pleasewait("Please Wait.. Running Exec...");
resexec("longshell.sh");
[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

[INDENT][SIZE="5"][FONT="Century Gothic"][COLOR="Navy"][B]reboot[/B][/COLOR][/FONT][/SIZE]
  [INDENT]
    [B]Descriptions:[/B]
      [INDENT]
        Reboot device
      [/INDENT]
    [B]Sintax:[/B]
      [INDENT][SIZE="4"]
        [SIZE="2"]void[/SIZE] [B]reboot[/B](method);
      [/SIZE][/INDENT]
    [B]Parameters:[/B]
      [INDENT]
        [LIST]
          [*][B]method[/B] - Reboot Method, "now" : reboot directly, "onfinish" : reboot after installation finished, "cancel" : cancel onfinish reboot
        [/LIST]
      [/INDENT]
    [B]Return Value:[/B]
      [INDENT]
        none
      [/INDENT]
    [B]Examples:[/B]
      [INDENT]
        [CODE]# Reboot Directly
reboot("now");
[/CODE]
      [/INDENT]
  [/INDENT]
[/INDENT]

  
  //-- MAIN UI FUNCTIONS (With Next & Back Buttons)
  RegisterFunction("anisplash",     AROMA_ANISPLASH);     //-- SPLASH SCREEN
  RegisterFunction("splash",        AROMA_SPLASH);        //-- SPLASH SCREEN
  RegisterFunction("checkbox",      AROMA_CHECKBOX);      //-- CHECKBOX
  RegisterFunction("selectbox",     AROMA_SELECTBOX);     //-- SELECTBOX
  RegisterFunction("textbox",       AROMA_TEXTBOX);       //-- TEXTBOX
  RegisterFunction("viewbox",       AROMA_VIEWBOX);       //-- VIEWBOX
  RegisterFunction("agreebox",      AROMA_TEXTBOX);       //-- AGREEBOX
  RegisterFunction("menubox",       AROMA_MENUBOX);       //-- MENUBOX
  
  //-- INSTALL UI
  RegisterFunction("install",       AROMA_INSTALL);       //-- START INSTALLATION PROCCESS
  
  //-- DIALOG UI FUNCTIONS
  RegisterFunction("alert",         AROMA_ALERT);         //-- ALERT DIALOG
  RegisterFunction("textdialog",    AROMA_TEXTDIALOG);    //-- TEXT DIALOG
  RegisterFunction("confirm",       AROMA_CONFIRM);       //-- CONFIRM DIALOG
  
  
